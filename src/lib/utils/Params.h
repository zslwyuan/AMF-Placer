/**
 * @file DesignInfo.h
 * @author Tingyuan LIANG (tliang@connect.ust.hk)
 * @brief This header file contains the classes of data for a standalone design netlist.
 * @version 0.1
 * @date 2021-06-03
 *
 * @copyright Copyright (c) 2021 Reconfiguration Computing Systems Lab, The Hong Kong University of Science and
 * Technology. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

#ifndef _PARAMS
#define _PARAMS

#include <assert.h>
#include <fstream>
#include <iostream>
#include <map>
#include <sstream>
#include <string>
#include <vector>

/**
 * @brief User's Configuration from Json, including all defination.
 *
 */
struct Params
{
    // construct
    Params();
    Params(const std::string &JSONFileName);

    // initialize variables
    void init();

    // format from json
    bool read(const std::string &JSONFileName);

    ~Params();

    // the location of the design netlist zip file [DESIGN]
    std::string vivadoExtractDesignPath;

    // ==> the location of the device zip file [DEVICE]
    std::string vivadoExtractDevicePath;
    // ==> the location of a information file indicating the offset of pins relative to the coordinate of the device site. (e.g. PCIE bank spans in a long range) [DEVICE]
    std::string specialPinOffsetPath;
    //==> the location of a information file indicating the resource demand of each type of design standard cells [DEVICE]
    std::string cellType2fixedAmoPath;
    // ==> the location of a information file indicating the resource demand of each type of design standard cells [DEVICE]
    std::string cellType2sharedCellTypePath;
    // ==> the location of a information file indicating the DeviceSite/DeviceBEL demand of each type of design standard cells [DEVICE]
    std::string sharedCellType2BELtypePath;
    // ==> the location of a information file indicating how some types of standard cells can be mapped different types of BEL slots in different types of DeviceSite [DEVICE]
    std::string mergedSharedCellType2sharedCellType;
    //==> the location of a information file indicating some macros which cannot be identified by AMF-Placer which we can detect in Vivado [DESIGN]
    std::string unpredictableMacroDesignPath;
    // ==> the location of a information file indicating some elements, locations of which are fixed on the device [DESIGN]
    std::string fixedUnitsDesignPath;
    // clock file ==>  (Optional) the location of a information file indicating the clock driver pins in the design [DESIGN]
    std::string clockDesignPath;
    //==> (Optional) the location of a information file indicating some user-defined clusters for optimization [DESIGN]
    std::string designCluster;
    // ==> (Optional) the location where the information of clusters generated by initial partitioning should be dumped. [DEBUG]
    std::string dumpClusterPath;
    //"dumpClusterSAPath": "", // ==> (Optional) the location where the trace of the SA procedure should be dumped. [DEBUG]
    std::string dumpClusterSAPath;
    // ==> (Optional) the location where the information of CLB legalization should be dumped. [DEBUG]
    std::string DumpCLBLegalization;
    //// "SLICEL_LUT":  ==> (Optional) the location where the information of SLICEL_LUT density should be dumped. [DEBUG]
    std::string SLICEL_LUT;
    //// "DumpLUTFFCoordTrace":"" //  ==> (Optional) the location where the trace of LUT/FF coordinate change should be dumped. [DEBUG]
    std::string DumpLUTFFCoordTrace;
    // ==> (Optional) the location where the trace of CARRY coordinate change should be dumped. [DEBUG]
    std::string DumpCARRYCoordTrace;
    // ==> (Optional) the location where the trace of macros coordinate change should be dumped. [DEBUG]
    std::string dumpMacroDensity;
    //// "Dump Cell Density":"" ,// ==> (Optional) the location where the trace of standard cells coordinate change should be dumped. [DEBUG]
    std::string dumpCellDensityPath;
    //// "DumpLUTCoordTrace": "" ,//==> (Optional) the location where the trace of LUT coordinate change should be dumped. [DEBUG]
    std::string DumpLUTCoordTrace;
    //// "DumpDSPCoordTrace":"" ,// ==> (Optional) the location where the trace of DSP coordinate change should be dumped. [DEBUG]
    std::string DumpDSPCoordTrace;
    //// "DumpFFCoordTrace": "" ,// ==> (Optional) the location where the trace of FF coordinate change should be dumped. [DEBUG]
    std::string DumpFFCoordTrace;
    //// "DumpAllCoordTrace" : "" ,// ==> (Optional) the location where the trace of All elements' coordinate change should be dumped. [DEBUG]
    std::string DumpAllCoordTrace;
    //"GlobalPlacerPrintHPWL": "" ,// ==> (Optional) indicate whether print out the detailed changes of HPWL during global placement. [DEBUG]
    bool GlobalPlacerPrintHPWL;
    //"DumpCLBPacking" : "" ,// ==> (Optional) indicate where to dump the information of CLB packing
    std::string DumpCLBPacking;
    //"DumpLUTFFPair": "" ,// ==> (Optional) indicate where to dump the information of LUT-FF pairing
    std::string DumpLUTFFPair;
    //"DumpClockUtilization": "" ,// ==> (Optional) indicate whether print out the detailed changes of clock utilization [DEBUG]
    std::string DumpClockUtilization;
    int ClockPeriod;
    //// "DumpMacroLegalization" : "" ,// ==> (Optional) indicate where print out macro legalization information [DEBUG]
    std::string DumpMacroLegalization;
    //// "MacroLegalizationVerbose" : "" ,//==> (Optional:default "false") indicate whether print out DSP/BRAM macro legalization information during runtime [DEBUG]
    bool MacroLegalizationVerbose;
    //// "CLBLegalizationVerbose" :  "" ,//==> (Optional:default "false") indicate whether print out CLB legalization information during runtime [DEBUG]
    bool CLBLegalizationVerbose;
    //"Simulated Annealing restartNum":"", //  ==> a number indicate how many times the SA procedure should restart [PLACER]
    int SARestartNum;
    //"Simulated Annealing IterNum": "" ,// ==> a number indicate the total iteration number the SA procedure should conduct [PLACER]
    long SAIterNum;
    //// "RandomInitialPlacement" :"" //  ==> (Optional:default "false") indicate whether the initial placement is randomly generated [PLACER]
    bool RandomInitialPlacement;
    //"DrawNetAfterEachIteration":  "" ,//==> (Optional:default "false") indicate whether use OpenGL to draw the nets after each iteration of SA procedure [PLACER]
    std::string DrawNetAfterEachIteration;
    //"PseudoNetWeight": "" ,//==> indicate the initial pseudo net weight which controls the placer convergence speed. [PLACER]
    double PseudoNetWeight;
    //"GlobalPlacementIteration": "" ,//==> indicate the total number of the global placement iterations [PLACER]
    int GlobalPlacementIteration;
    //"clockRegionXNum":"" ,// ==> indicate how many clock region in a row on the device [DEVICE]
    int clockRegionXNum;
    //"clockRegionYNum":  "" ,//==> indicate how many clock region in a column on the device [DEVICE]
    int clockRegionYNum;
    //"clockRegionDSPNum": "" ,//==> indicate the threshold number of DSPs in a clock region during initial SA placement [PLACER]
    int clockRegionDSPNum;
    //"clockRegionBRAMNum": "" ,//==> indicate the threshold number of BRAMs in a clock region during initial SA placement [PLACER]
    int clockRegionBRAMNum;
    //"jobs": "" ,// ==> indicate the parallelism of the placer [PLACER]
    int jobs;
    //"y2xRatio": "" ,// ==> indicate the weight of Y routing net compared to X routing net [PLACER]
    double y2xRatio;
    //"ClusterPlacerVerbose": "" ,//==> (Optional:default "false") indicate whether the SA cluster placer print outs detailed information during runtime [DEBUG]
    bool ClusterPlacerVerbose;
    //"GlobalPlacerVerbose":  "" ,//==> (Optional:default "false") indicate whether the global placer print outs detailed information during runtime [DEBUG]
    bool GlobalPlacerVerbose;
    //"DirectMacroLegalize": "" ,//==> (Optional:default "false") indicate whether AMFPlacer use direct macro legalization instread of the progressive legalization (2-phase legalization)
    bool DirectMacroLegalize;
    //// "SpreaderSimpleExpland":  "" ,//==> (Optional:default "false") indicate whether the cell spreader finds the cell spreading window in a simple approach [PLACER]
    bool SpreaderSimpleExpland;
    //// "pseudoNetWeightConsiderNetNum" : "" ,// ==> (Optional:default "true") indicate whether the wirelength optimizer considers the interconnection density for psuedo net weight [PLACER]
    bool pseudoNetWeightConsiderNetNum;
    //// "disableSpreadingConvergeRatio" :"" ,// ==> (Optional:default "false") indicate whether the cell spreader utilizes forget-rate-based cell spreading location update [PLACER]
    bool disableSpreadingConvergeRatio;
    //"drawClusters": "" ,//==> (Optional:default "false") indicate whether the SA placer draws the cluster placement with OpenGL [DEBUG]
    bool drawClusters;
    //"MKL": "" ,//==> (Optional:default "false") indicate whether wirelength optimizer is based on MKL library when using OSQP placer, which can set constraints for the quadratic model [PLACER]
    bool MKL;
    //"dumpDirectory": "" ,//==> indicate where the "DUMP" files should be located. [PLACER]
    std::string dumpDirectory;
    ////"useUnconstrainedCG" : "" ,// ==>(Optional:default "true") indicate whether wirelength optimizer uses Eigen3, which cannot set constraints, to solve the quadratic problem. If false, OSQP solver which can set constraints for the quadratic model, will be involved to replace Eigen3. [PLACER]
    bool useUnconstrainedCG;
};

#endif